<%= form_for [:admin, @essay] do |f| %>
  <% if @essay.errors.any? %>
    <% @essay.errors.full_messages.each do |msg| %>
        <li><%= msg %></li>
    <% end %>
  <% end %>

  <div id="map-image">
    <% if @essay.lat && @essay.lng %>
      <%= map_image_tag @essay, 300, 200, 8 %>
    <% else %>
    <img />
    <% end %>
  </div>

  <%= f.hidden_field :lat %>
  <%= f.hidden_field :lng %>
  <%= f.hidden_field :map_zoom_level %>

  <div><%= f.text_field :title, :placeholder => 'Title' %></div>
  <div><%= f.text_field :location, :placeholder => 'Location' %></div>
  <div><%= f.text_area :description, :rows => 3, :placeholder => 'Description' %></div>
  <div><%= f.text_area :needs, :rows => 3, :placeholder => 'A Material Scientist, An Engineer, etc' %></div>

  <%= f.submit 'Preview Essay', :class => 'btn btn-primary' %> or <%= link_to 'cancel', admin_essays_path %>
<% end %>

<div id="photos">
  <% @essay.photos.each do |p| %>
    <div class="photo-form">
      <img src="<%= p.file.thumb.url %>" class="pull-left">
      <input type="text" name="caption" value="<%= p.caption %>">
    </div>
  <% end %>
</div>
<style type="text/css">
.photo-form { overflow:auto; margin-bottom: 10px; }
.photo-form img { margin-right: 10px; }
.photo-form input[name="caption"] { margin-top: 10px; }
</style>
      <div id="micro-uploader">
        <div class="padding">
          <div class="select-container"><a class="select-button">Select Files For Upload</a></div>
        </div>
        <div class="file-list hidden">
          <div class="filenames"></div>
        </div>
      </div>

<script type="text/javascript">
YUI().use('autocomplete', function (Y) {
    var acNode = Y.one('#essay_location');

    acNode.plug(Y.Plugin.AutoComplete, {
        // Highlight the first result of the list.
        activateFirstItem: true,

        // The list of the results contains up to 10 results.
        maxResults: 10,

        // To display the suggestions, the minimum of typed chars is five.
        minQueryLength: 3,

        // Number of milliseconds to wait after user input before triggering a
        // `query` event. This is useful to throttle queries to a remote data
        // source.
        queryDelay: 500,

        // Handling the list of results is mandatory, because the service can be
        // unavailable, can return an error, one result, or an array of results.
        // However `resultListLocator` needs to always return an array.
        resultListLocator: function (response) {
            console.log(response);
            // Makes sure an array is returned even on an error.
            if (response.error) {
                return [];
            }

            var query = response.query.results.json,
                addresses;

            if (query.status !== 'OK') {
                return [];
            }

            // Grab the actual addresses from the YQL query.
            addresses = query.results;

            // Makes sure an array is always returned.
            return addresses.length > 0 ? addresses : [addresses];
        },

        // When an item is selected, the value of the field indicated in the
        // `resultTextLocator` is displayed in the input field.
        resultTextLocator: 'formatted_address',

        // {query} placeholder is encoded, but to handle the spaces correctly,
        // the query is has to be encoded again:
        //
        // "my address" -> "my%2520address" // OK => {request}
        // "my address" -> "my%20address"   // OK => {query}
        requestTemplate: function (query) {
            return encodeURI(query);
        },

        // {request} placeholder, instead of the {query} one, this will insert
        // the `requestTemplate` value instead of the raw `query` value for
        // cases where you actually want a double-encoded (or customized) query.
        source: 'SELECT * FROM json WHERE ' +
                    'url="http://maps.googleapis.com/maps/api/geocode/json?' +
                        'sensor=false&' +
                        'address={request}"',

        // Automatically adjust the width of the dropdown list.
        width: 'auto'
    });

    // Adjust the width of the input container.
    acNode.ac.after('resultsChange', function () {
        var newWidth = this.get('boundingBox').get('offsetWidth');
        acNode.setStyle('width', Math.max(newWidth, 100));
    });

    function getZoom(loc) {
      var GLOBE_WIDTH = 256,
        west = loc.southwest.lng,
        east = loc.northeast.lng,
        angle = east - west,
        zoom;

      if (angle < 0) {
        angle += 360;
      }

      zoom = Math.round(Math.log(300 * 360 / angle / GLOBE_WIDTH) / Math.LN2);

      return zoom;
    }

    // Fill the `lat` and `lng` fields when the user selects an item.
    acNode.ac.on('select', function (e) {
        var location = e.result.raw.geometry.location, zoom;

        zoom = getZoom(e.result.raw.geometry.bounds);

        Y.one('#essay_lat').set('value', location.lat);
        Y.one('#essay_lng').set('value', location.lng);
        Y.one('#essay_map_zoom_level').set('value', zoom);
        Y.one('#map-image img').set('src', 'http://maps.googleapis.com/maps/api/staticmap?center=' + location.lat + ',' + location.lng + '&zoom=' + zoom + '&size=300x200&sensor=false').show();
    });
});
</script>

<script>
YUI({filter:"raw"}).use("uploader", "json", "transition", function(Y) {
  var container = Y.one('#micro-uploader'),
    csrfToken = Y.one('meta[name="csrf-token"]').getAttribute('content');

  // container.one(".progress").set("text", "Uploader type: " + Y.Uploader.TYPE);

  if (Y.Uploader.TYPE != "none" && !Y.UA.ios) {
    var uploader = new Y.Uploader({
                                    multipleFiles: true,
                                    uploadURL: "/admin/essays/<%= @essay.id %>/photos",
                                    simLimit: 2,
                                    withCredentials: false,
                                    fileFieldName: 'file',
                                    uploadHeaders: { 'X-CSRF-Token': csrfToken },
                                    selectFilesButton: container.one('.select-button')
                                  });
    var uploadDone = false;

    if (Y.Uploader.TYPE == "html5") {
      uploader.set("dragAndDropArea", "#micro-uploader .select-container");

      // Y.one("#ddmessage").setHTML("<strong>Drag and drop files here.</strong>");

      uploader.on(["dragenter", "dragover"], function (event) {
          var dd = event.target.get('dragAndDropArea');
          dd.addClass("yellowBackground");
       });

       uploader.on(["dragleave", "drop"], function (event) {
          var dd = event.target.get('dragAndDropArea');
          dd.removeClass("yellowBackground");
       });
    }

    uploader.render("#micro-uploader .select-container");

    uploader.after("fileselect", function (event) {

      var fileList = event.fileList;
      var fileTable = container.one(".filenames");

      if (fileList.length > 0 && Y.one("#nofiles")) {
        Y.one("#nofiles").remove();
      }

      if (uploadDone) {
        uploadDone = false;
        fileTable.setHTML("");
      }

      Y.each(fileList, function (fileInstance) {
        fileTable.append("<div id='" + fileInstance.get("id") + "_row" + "'>" +
                              "<span class='filename'>" + fileInstance.get("name") + "</span>" +
                              "<span class='percentdone'></span>" +
                              "</div>");
      });

      container.one('.file-list').removeClass('hidden');
    });

    uploader.after("fileListChange", function (event) {
      if (!uploadDone && uploader.get("fileList").length > 0) {
        uploader.uploadAll();
      }
    });

    uploader.on("uploadprogress", function (event) {
      var fileRow = Y.one("#" + event.file.get("id") + "_row");
      console.log("uploadprogress", event, fileRow, fileRow.one(".percentdone"), event.percentLoaded);
      fileRow.one(".percentdone").setStyle("width", event.percentLoaded + "%");
    });

    uploader.on("uploadstart", function (event) {
      // uploader.set("enabled", false);
      // Y.one("#uploadFilesButton").addClass("yui3-button-disabled");
      // Y.one("#uploadFilesButton").detach("click");
    });

    uploader.on("uploadcomplete", function (event) {
      var fileRow = Y.one("#" + event.file.get("id") + "_row"),
          response = Y.JSON.parse(event.data);
          console.log("uploadcomplete", event, fileRow, fileRow.one(".percentdone"));
          console.log("parsed response", response);
          fileRow.one(".percentdone").setStyle("width", "100%");
          if (response.hasOwnProperty('errors')) {
            fileRow.addClass('error').append('<i abbr="there was an error">?</i>');
          } else {
/*
            creativeAssetList.add(response);
            setTimeout(function () {
              fileRow.hide('fadeOut', {}, function () {
                console.log(this);
                Y.one(this).remove();
                if (container.one('.filenames').get('children').size() == 0) {
                  container.one('.file-list').addClass("hidden")
                }
              });
            }, 5000) */
          }

          // fileRow.one('.preview img').set("src", response.file.url);
    });

    uploader.on("totaluploadprogress", function (event) {
      // container.one(".progress").setHTML("Total uploaded: <strong>" + event.percentLoaded + "%" + "</strong>");
    });

    uploader.on("alluploadscomplete", function (event) {
      // uploader.set("enabled", true);
      uploader.set("fileList", []);
      // window.location.reload()
      // container.one(".progress").set("text", "Uploads complete!");
      uploadDone = true;
    });

    /* Y.one("#uploadFilesButton").on("click", function () {
      if (!uploadDone && uploader.get("fileList").length > 0) {
        uploader.uploadAll();
      }
    }); */
  } else {
      Y.one("#micro-uploader").set("text", "We are sorry, but to use the uploader, you either need a browser that support HTML5 or have the Flash player installed on your computer.");
  }


});

</script>
